from keep_alive import keep_alive

keep_alive()
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (ApplicationBuilder, CommandHandler, MessageHandler,
                          CallbackQueryHandler, filters, ContextTypes)
from dotenv import load_dotenv
import yt_dlp
import re

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = "human_refer"  # ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ (‡¶¨‡ßç‡¶Ø‡¶æ‡¶ó ‡¶õ‡¶æ‡ßú‡¶æ)

user_state = {}  # user_id: 'youtube' / 'tiktok' / 'facebook'


# ‡¶™‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡ßü‡¶æ‡¶Æ ‡¶Æ‡ßá‡¶®‡ßÅ (‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶∏‡ßã‡¶∞‡ßç‡¶∏ ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶¨‡ßã‡¶§‡¶æ‡¶Æ)
def main_menu():
    keyboard = [
        [InlineKeyboardButton("‚ñ∂Ô∏è YouTube Shorts", callback_data='youtube')],
        [InlineKeyboardButton("‚ñ∂Ô∏è TikTok Shorts", callback_data='tiktok')],
        [InlineKeyboardButton("‚ñ∂Ô∏è Facebook Shorts", callback_data='facebook')],
    ]
    return InlineKeyboardMarkup(keyboard)


# Back button
def back_button():
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton("üîô Back to Menu", callback_data='back')]])


# ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
async def is_user_joined_channel(context: ContextTypes.DEFAULT_TYPE,
                                 user_id: int) -> bool:
    try:
        member = await context.bot.get_chat_member(f"@{CHANNEL_USERNAME}",
                                                   user_id)
        if member.status in ['member', 'creator', 'administrator']:
            return True
        else:
            return False
    except Exception as e:
        print(f"Error checking channel membership: {e}")
        return False


# URL validation function platform-wise
def validate_url(url: str, platform: str) -> bool:
    url = url.lower()
    if platform == 'youtube':
        # ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶°‡ßã‡¶Æ‡ßá‡¶á‡¶® ‡¶ö‡ßá‡¶ï (youtube.com or youtu.be)
        return bool(
            re.search(r'(https?://)?(www\.)?(youtube\.com|youtu\.be)/', url))
    elif platform == 'tiktok':
        # ‡¶ü‡¶ø‡¶ï‡¶ü‡¶ï ‡¶°‡ßã‡¶Æ‡ßá‡¶á‡¶® ‡¶ö‡ßá‡¶ï
        return bool(re.search(r'(https?://)?(www\.)?tiktok\.com/', url))
    elif platform == 'facebook':
        # ‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï ‡¶°‡ßã‡¶Æ‡ßá‡¶á‡¶® ‡¶ö‡ßá‡¶ï
        return bool(re.search(r'(https?://)?(www\.)?facebook\.com/', url))
    else:
        return False


# /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    joined = await is_user_joined_channel(context, user_id)
    if not joined:
        await update.message.reply_text(
            f"‚ùóÔ∏è ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ [@{CHANNEL_USERNAME}](https://t.me/{CHANNEL_USERNAME}) ‡¶è ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§\n"
            "‡¶Ø‡ßã‡¶ó‡¶¶‡¶æ‡¶®‡ßá‡¶∞ ‡¶™‡¶∞ /start ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡•§",
            parse_mode="Markdown",
            disable_web_page_preview=True,
        )
        return

    welcome_text = (
        "‚ú® *Welcome to Premium Shorts Downloader Bot!*\n\n"
        "üîª ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶® ‡¶•‡ßá‡¶ï‡ßá Shorts ‡¶è‡¶∞ ‡¶∏‡ßã‡¶∞‡ßç‡¶∏ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®:\n\n"
        "‚ñ∂Ô∏è YouTube Shorts\n‚ñ∂Ô∏è TikTok Shorts\n‚ñ∂Ô∏è Facebook Shorts\n\n"
        "üîí ‡¶¨‡¶ü‡¶ü‡¶ø ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶§‡¶ñ‡¶®‡¶á ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá ‡¶Ø‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶•‡¶æ‡¶ï‡¶¨‡ßá‡¶®‡•§")
    await update.message.reply_text(welcome_text,
                                    reply_markup=main_menu(),
                                    parse_mode="Markdown")


# ‡¶¨‡¶æ‡¶ü‡¶® ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    joined = await is_user_joined_channel(context, user_id)
    if not joined:
        await query.answer()
        await query.edit_message_text(
            f"‚ùóÔ∏è ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ [@{CHANNEL_USERNAME}](https://t.me/{CHANNEL_USERNAME}) ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßá‡¶∞‡¶ø‡ßü‡ßá ‡¶ó‡ßá‡¶õ‡ßá‡¶® ‡¶¨‡¶æ ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶®‡¶®‡¶ø‡•§\n"
            "‡¶Ö‡¶§‡¶è‡¶¨, ‡¶¨‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶®‡ßá‡¶á‡•§\n"
            "‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
            parse_mode="Markdown",
            disable_web_page_preview=True,
        )
        return

    await query.answer()

    if query.data in ['youtube', 'tiktok', 'facebook']:
        user_state[user_id] = query.data
        await query.edit_message_text(
            f"üìΩÔ∏è *Send the {query.data.capitalize()} Shorts video link now.*\n\n"
            "‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: https://www.example.com/your-shorts-link",
            parse_mode="Markdown",
            reply_markup=back_button())
    elif query.data == 'back':
        user_state.pop(user_id, None)
        await query.edit_message_text(
            "üîô *Back to main menu.*\n\n‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶Ö‡¶™‡¶∂‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®:",
            parse_mode="Markdown",
            reply_markup=main_menu())


# ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (yt-dlp)
def download_video(url: str):
    ydl_opts = {
        'format': 'best',
        'outtmpl': 'video.%(ext)s',
        'quiet': True,
        'nocheckcertificate': True,
        'ignoreerrors': True,
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=True)
        filename = ydl.prepare_filename(info)
        return filename, info


# ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶ø‡¶Ç (‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡ßç‡¶∞‡ßã‡¶∏‡ßá‡¶∏)
async def handle_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    choice = user_state.get(user_id)

    joined = await is_user_joined_channel(context, user_id)
    if not joined:
        await update.message.reply_text(
            f"‚ùóÔ∏è ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ [@{CHANNEL_USERNAME}](https://t.me/{CHANNEL_USERNAME}) ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßá‡¶∞‡¶ø‡ßü‡ßá ‡¶ó‡ßá‡¶õ‡ßá‡¶® ‡¶¨‡¶æ ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶®‡¶®‡¶ø‡•§\n"
            "‡¶Ö‡¶§‡¶è‡¶¨, ‡¶¨‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ‡•§\n"
            "‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
            parse_mode="Markdown",
            disable_web_page_preview=True,
        )
        return

    if choice not in ['youtube', 'tiktok', 'facebook']:
        await update.message.reply_text(
            "‚ùó ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶•‡ßá‡¶ï‡ßá Shorts ‡¶è‡¶∞ ‡¶∏‡ßã‡¶∞‡ßç‡¶∏ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
            reply_markup=main_menu(),
            parse_mode="Markdown")
        return

    # Validate URL based on selected platform
    if not validate_url(text, choice):
        await update.message.reply_text(
            f"‚ö†Ô∏è ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá *‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ {choice.capitalize()} Shorts ‡¶è‡¶∞ ‡¶∏‡¶†‡¶ø‡¶ï URL ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§*",
            parse_mode="Markdown")
        return

    await update.message.reply_text("‚è≥ *Downloading Shorts, please wait...*",
                                    parse_mode="Markdown")

    try:
        filepath, info = download_video(text)
        max_size = 50 * 1024 * 1024  # 50MB Telegram limit

        if not filepath or not os.path.exists(filepath):
            raise Exception("Downloaded file not found.")

        file_size = os.path.getsize(filepath)
        if file_size > max_size:
            # ‡¶¨‡ßú ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶π‡¶≤‡ßá ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶ì
            await update.message.reply_text(
                f"‚ö†Ô∏è Shorts ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶ü‡¶ø ‡¶¨‡¶°‡¶º (>{max_size//1024//1024}MB)‡•§ Telegram-‡¶è ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶®‡¶Ø‡¶º‡•§\n"
                f"‡¶Ü‡¶™‡¶®‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶ü‡¶ø ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®:\n\n{info.get('webpage_url')}",
                parse_mode="Markdown")
            os.remove(filepath)
            return

        await update.message.reply_video(video=open(filepath, 'rb'),
                                         caption=info.get(
                                             'title', 'Shorts Video'))
        os.remove(filepath)

    except Exception as e:
        print(f"Download error: {e}")
        await update.message.reply_text(
            "‚ùå *Download failed!*\n"
            "‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨‡¶§ ‡¶≤‡¶ø‡¶Ç‡¶ï‡¶ü‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡¶Ø‡¶º ‡¶Ö‡¶•‡¶¨‡¶æ Shorts ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
            parse_mode="Markdown")

    # ‡¶∂‡ßá‡¶∑‡ßá ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶ì ‡¶è‡¶¨‡¶Ç ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶ï‡ßç‡¶≤‡¶ø‡ßü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßã
    await update.message.reply_text(
        "üé¨ *‡¶Ü‡¶∞‡ßã Shorts ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡ßã‡¶∞‡ßç‡¶∏ ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®:*",
        reply_markup=main_menu(),
        parse_mode="Markdown")
    user_state.pop(user_id, None)


if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_link))

    print("üöÄ Bot is running...")
    app.run_polling()